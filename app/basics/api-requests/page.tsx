/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useState } from "react";
import ComponentPreview from "@/components/showcase/ComponentPreview";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";

export default function APIRequestsPage() {
  // GET –∑–∞–ø—Ä–æ—Å
  const [getResult, setGetResult] = useState<any>(null);
  const [getLoading, setGetLoading] = useState(false);

  // POST –∑–∞–ø—Ä–æ—Å
  const [postTitle, setPostTitle] = useState("");
  const [postBody, setPostBody] = useState("");
  const [postResult, setPostResult] = useState<any>(null);
  const [postLoading, setPostLoading] = useState(false);

  // PUT –∑–∞–ø—Ä–æ—Å
  const [putId, setPutId] = useState("1");
  const [putTitle, setPutTitle] = useState("");
  const [putResult, setPutResult] = useState<any>(null);
  const [putLoading, setPutLoading] = useState(false);

  // DELETE –∑–∞–ø—Ä–æ—Å
  const [deleteId, setDeleteId] = useState("1");
  const [deleteResult, setDeleteResult] = useState<any>(null);
  const [deleteLoading, setDeleteLoading] = useState(false);

  // GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const handleGet = async () => {
    setGetLoading(true);
    try {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/posts/1"
      );
      const data = await response.json();
      setGetResult(data);
    } catch (error) {
      setGetResult({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö" });
    } finally {
      setGetLoading(false);
    }
  };

  // POST - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const handlePost = async () => {
    setPostLoading(true);
    try {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/posts",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title: postTitle,
            body: postBody,
            userId: 1,
          }),
        }
      );
      const data = await response.json();
      setPostResult(data);
    } catch (error) {
      setPostResult({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏" });
    } finally {
      setPostLoading(false);
    }
  };

  // PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const handlePut = async () => {
    setPutLoading(true);
    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/posts/${putId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            id: putId,
            title: putTitle,
            body: "Updated body",
            userId: 1,
          }),
        }
      );
      const data = await response.json();
      setPutResult(data);
    } catch (error) {
      setPutResult({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
    } finally {
      setPutLoading(false);
    }
  };

  // DELETE - —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const handleDelete = async () => {
    setDeleteLoading(true);
    try {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/posts/${deleteId}`,
        {
          method: "DELETE",
        }
      );
      setDeleteResult({ success: true, message: "–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" });
    } catch (error) {
      setDeleteResult({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
    } finally {
      setDeleteLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="mb-12 text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-4">
            üåê API –ó–∞–ø—Ä–æ—Å—ã
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –ù–∞—É—á–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å GET, POST, PUT –∏ DELETE –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          </p>
        </div>

        {/* –ß—Ç–æ —Ç–∞–∫–æ–µ API */}
        <section className="mb-16 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            –ß—Ç–æ —Ç–∞–∫–æ–µ API –∑–∞–ø—Ä–æ—Å—ã?
          </h2>
          <p className="text-gray-600 mb-4">
            <strong>API (Application Programming Interface)</strong> ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –æ–±—â–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–±—ç–∫–µ–Ω–¥–æ–º). 
            –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
          </p>

          <div className="bg-blue-50 rounded border-l-4 border-blue-500 p-4 mb-6">
            <p className="text-blue-900">
              <strong>üí° –ó–∞—á–µ–º –Ω—É–∂–Ω–æ:</strong> –ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ä–º—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è), –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è), —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏.
            </p>
          </div>

          <h3 className="font-bold text-gray-900 mb-3 text-xl">4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:</h3>
          <ul className="list-disc list-inside space-y-2 text-gray-700">
            <li><strong>GET</strong> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—á–∏—Ç–∞—Ç—å)</li>
            <li><strong>POST</strong> ‚Äî —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ)</li>
            <li><strong>PUT</strong> ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ)</li>
            <li><strong>DELETE</strong> ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</li>
          </ul>
        </section>

        {/* GET –∑–∞–ø—Ä–æ—Å */}
        <div className="mb-8">
          <ComponentPreview
            title="GET - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            description="–ó–∞–ø—Ä–æ—Å–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç ‚Ññ1"
            code={`const [data, setData] = useState(null);
const [loading, setLoading] = useState(false);

const handleGet = async () => {
  setLoading(true);
  try {
    const response = await fetch(
      'https://jsonplaceholder.typicode.com/posts/1'
    );
    const data = await response.json();
    setData(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    setLoading(false);
  }
};

<Button onClick={handleGet} disabled={loading}>
  {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
</Button>

{data && (
  <div>
    <h3>{data.title}</h3>
    <p>{data.body}</p>
  </div>
)}`}
          >
            <div className="w-full space-y-4">
              <Button
                variant="primary"
                size="md"
                onClick={handleGet}
                disabled={getLoading}
              >
                {getLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (GET)"}
              </Button>

              {getResult && (
                <div className="bg-gray-50 rounded-lg p-4 border-2 border-gray-200">
                  <h3 className="font-bold text-gray-900 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                  <pre className="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
                    {JSON.stringify(getResult, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </ComponentPreview>
        </div>

        {/* POST –∑–∞–ø—Ä–æ—Å */}
        <div className="mb-8">
          <ComponentPreview
            title="POST - –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            description="–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"
            code={`const [title, setTitle] = useState('');
const [body, setBody] = useState('');
const [result, setResult] = useState(null);

const handlePost = async () => {
  const response = await fetch(
    'https://jsonplaceholder.typicode.com/posts',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title: title,
        body: body,
        userId: 1,
      }),
    }
  );
  const data = await response.json();
  setResult(data);
};

<Input 
  placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
  value={title}
  onChange={(e) => setTitle(e.target.value)}
/>
<Input 
  placeholder="–¢–µ–∫—Å—Ç"
  value={body}
  onChange={(e) => setBody(e.target.value)}
/>
<Button onClick={handlePost}>
  –°–æ–∑–¥–∞—Ç—å (POST)
</Button>`}
          >
            <div className="w-full space-y-4">
              <Input
                placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞"
                value={postTitle}
                onChange={(e) => setPostTitle(e.target.value)}
              />
              <Input
                placeholder="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"
                value={postBody}
                onChange={(e) => setPostBody(e.target.value)}
              />
              <Button
                variant="primary"
                size="md"
                onClick={handlePost}
                disabled={postLoading || !postTitle || !postBody}
              >
                {postLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–°–æ–∑–¥–∞—Ç—å (POST)"}
              </Button>

              {postResult && (
                <div className="bg-green-50 rounded-lg p-4 border-2 border-green-200">
                  <h3 className="font-bold text-green-900 mb-2">
                    ‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!
                  </h3>
                  <pre className="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
                    {JSON.stringify(postResult, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </ComponentPreview>
        </div>

        {/* PUT –∑–∞–ø—Ä–æ—Å */}
        <div className="mb-8">
          <ComponentPreview
            title="PUT - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            description="–û–±–Ω–æ–≤–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            code={`const [id, setId] = useState('1');
const [title, setTitle] = useState('');
const [result, setResult] = useState(null);

const handlePut = async () => {
  const response = await fetch(
    \`https://jsonplaceholder.typicode.com/posts/\${id}\`,
    {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: id,
        title: title,
        body: 'Updated body',
        userId: 1,
      }),
    }
  );
  const data = await response.json();
  setResult(data);
};

<Input 
  placeholder="ID –ø–æ—Å—Ç–∞"
  value={id}
  onChange={(e) => setId(e.target.value)}
/>
<Input 
  placeholder="–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
  value={title}
  onChange={(e) => setTitle(e.target.value)}
/>
<Button onClick={handlePut}>
  –û–±–Ω–æ–≤–∏—Ç—å (PUT)
</Button>`}
          >
            <div className="w-full space-y-4">
              <Input
                placeholder="ID –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)"
                value={putId}
                onChange={(e) => setPutId(e.target.value)}
              />
              <Input
                placeholder="–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                value={putTitle}
                onChange={(e) => setPutTitle(e.target.value)}
              />
              <Button
                variant="secondary"
                size="md"
                onClick={handlePut}
                disabled={putLoading || !putId || !putTitle}
              >
                {putLoading ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–û–±–Ω–æ–≤–∏—Ç—å (PUT)"}
              </Button>

              {putResult && (
                <div className="bg-yellow-50 rounded-lg p-4 border-2 border-yellow-200">
                  <h3 className="font-bold text-yellow-900 mb-2">
                    ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!
                  </h3>
                  <pre className="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
                    {JSON.stringify(putResult, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </ComponentPreview>
        </div>

        {/* DELETE –∑–∞–ø—Ä–æ—Å */}
        <div className="mb-8">
          <ComponentPreview
            title="DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            description="–£–¥–∞–ª–∏ –∑–∞–ø–∏—Å—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ ID"
            code={`const [id, setId] = useState('1');
const [result, setResult] = useState(null);

const handleDelete = async () => {
  const response = await fetch(
    \`https://jsonplaceholder.typicode.com/posts/\${id}\`,
    {
      method: 'DELETE',
    }
  );
  setResult({ success: true, message: '–£–¥–∞–ª–µ–Ω–æ!' });
};

<Input 
  placeholder="ID –ø–æ—Å—Ç–∞"
  value={id}
  onChange={(e) => setId(e.target.value)}
/>
<Button onClick={handleDelete}>
  –£–¥–∞–ª–∏—Ç—å (DELETE)
</Button>`}
          >
            <div className="w-full space-y-4">
              <Input
                placeholder="ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)"
                value={deleteId}
                onChange={(e) => setDeleteId(e.target.value)}
              />
              <Button
                variant="outline"
                size="md"
                onClick={handleDelete}
                disabled={deleteLoading || !deleteId}
              >
                {deleteLoading ? "–£–¥–∞–ª–µ–Ω–∏–µ..." : "–£–¥–∞–ª–∏—Ç—å (DELETE)"}
              </Button>

              {deleteResult && (
                <div className="bg-red-50 rounded-lg p-4 border-2 border-red-200">
                  <h3 className="font-bold text-red-900 mb-2">
                    üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!
                  </h3>
                  <p className="text-red-700">{deleteResult.message}</p>
                </div>
              )}
            </div>
          </ComponentPreview>
        </div>

        {/* –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */}
        <section className="mb-16 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
          </h2>

          <p className="text-gray-600 mb-6">
            –í—Å–µ–≥–¥–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–π API –∑–∞–ø—Ä–æ—Å—ã –≤ <code className="bg-gray-100 px-2 py-1 rounded text-sm">try/catch</code> –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:
          </p>

          <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg text-sm overflow-x-auto">
{`try {
  const response = await fetch('https://api.example.com/data');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
  if (!response.ok) {
    throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
  
  const data = await response.json();
  console.log(data);
  
} catch (error) {
  console.error('–û—à–∏–±–∫–∞:', error);
  alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
}`}
          </pre>
        </section>

        {/* –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã */}
        <section className="mb-16 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-yellow-50 rounded-lg p-6 border-l-4 border-yellow-500">
              <h3 className="font-bold text-gray-900 mb-2">‚è≥ Async/Await</h3>
              <p className="text-gray-700 text-sm">
                –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π <code className="bg-gray-100 px-1 rounded">async/await</code> –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤, 
                —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
              </p>
            </div>

            <div className="bg-yellow-50 rounded-lg p-6 border-l-4 border-yellow-500">
              <h3 className="font-bold text-gray-900 mb-2">üìã Content-Type</h3>
              <p className="text-gray-700 text-sm">
                –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö (POST, PUT) —É–∫–∞–∑—ã–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫{" "}
                <code className="bg-gray-100 px-1 rounded">&#39;Content-Type&#39;: &#39;application/json&#39;</code>
              </p>
            </div>

            <div className="bg-yellow-50 rounded-lg p-6 border-l-4 border-yellow-500">
              <h3 className="font-bold text-gray-900 mb-2">üîÑ Loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
              <p className="text-gray-700 text-sm">
                –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å.
              </p>
            </div>

            <div className="bg-yellow-50 rounded-lg p-6 border-l-4 border-yellow-500">
              <h3 className="font-bold text-gray-900 mb-2">‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</h3>
              <p className="text-gray-700 text-sm">
                –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ <code className="bg-gray-100 px-1 rounded">try/catch</code>.
              </p>
            </div>
          </div>
        </section>

        {/* –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä */}
        <section className="bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å API
          </h2>

          <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg text-sm overflow-x-auto">
{`'use client';

import { useState } from 'react';
import Button from '@/components/ui/Button';

export default function MyComponent() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch(
        'https://jsonplaceholder.typicode.com/posts/1'
      );
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      const result = await response.json();
      setData(result);
      
    } catch (err) {
      setError(err.message);
      
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <Button onClick={fetchData} disabled={loading}>
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
      </Button>

      {error && (
        <p className="text-red-500">–û—à–∏–±–∫–∞: {error}</p>
      )}

      {data && (
        <div>
          <h3>{data.title}</h3>
          <p>{data.body}</p>
        </div>
      )}
    </div>
  );
}`}
          </pre>
        </section>

        {/* –¢–µ—Å—Ç–æ–≤—ã–π API */}
        <section className="mt-12 bg-blue-50 rounded-2xl shadow-lg p-8 border-2 border-blue-200">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            üìö –¢–µ—Å—Ç–æ–≤—ã–π API –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
          </h2>

          <p className="text-gray-700 mb-4">
            –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <strong>JSONPlaceholder</strong> ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:
          </p>

          <div className="bg-white rounded-lg p-4 mb-4">
            <p className="text-gray-700 font-mono text-sm">
              https://jsonplaceholder.typicode.com
            </p>
          </div>

          <p className="text-gray-700 mb-4">
            <strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</strong>
          </p>

          <ul className="list-disc list-inside space-y-2 text-gray-700">
            <li><code className="bg-gray-100 px-2 py-1 rounded text-sm">/posts</code> ‚Äî —Å—Ç–∞—Ç—å–∏</li>
            <li><code className="bg-gray-100 px-2 py-1 rounded text-sm">/users</code> ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</li>
            <li><code className="bg-gray-100 px-2 py-1 rounded text-sm">/comments</code> ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</li>
            <li><code className="bg-gray-100 px-2 py-1 rounded text-sm">/todos</code> ‚Äî –∑–∞–¥–∞—á–∏</li>
          </ul>
        </section>

      </div>
    </div>
  );
}
