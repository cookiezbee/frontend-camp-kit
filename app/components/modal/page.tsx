"use client";

import { useState } from "react";
import ComponentPreview from "@/components/showcase/ComponentPreview";
import Modal from "@/components/ui/Modal";
import Button from "@/components/ui/Button";
import Input from "@/components/ui/Input";

export default function ModalPage() {
  const [isOpen1, setIsOpen1] = useState(false);
  const [isOpen2, setIsOpen2] = useState(false);
  const [isOpen3, setIsOpen3] = useState(false);
  const [isOpen4, setIsOpen4] = useState(false);
  const [taskName, setTaskName] = useState("");
  const [taskDesc, setTaskDesc] = useState("");

  const modalCode = `"use client";

import { useEffect } from "react";

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  description?: string;
  children: React.ReactNode;
  illustration?: React.ReactNode;
  showCloseButton?: boolean;
}

export default function Modal({
  isOpen,
  onClose,
  title,
  description,
  children,
  illustration,
  showCloseButton = true,
}: ModalProps) {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "unset";
    }
    return () => {
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape") onClose();
    };
    if (isOpen) {
      document.addEventListener("keydown", handleEscape);
    }
    return () => document.removeEventListener("keydown", handleEscape);
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm"
      onClick={onClose}
    >
      <div
        className="relative bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {illustration && (
          <div className="bg-gradient-to-br from-blue-600 to-blue-700 p-8 rounded-t-2xl">
            {illustration}
          </div>
        )}

        {showCloseButton && (
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 rounded-full hover:bg-gray-100 transition-colors z-10"
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          >
            <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        )}

        <div className="p-6 text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">{title}</h2>
          {description && <p className="text-gray-600">{description}</p>}
        </div>

        <div className="px-6 pb-6">{children}</div>
      </div>
    </div>
  );
}`;

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="mb-12 text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-4">
            Modal (–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π
          </p>
        </div>

        {/* –ë–∞–∑–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
        <div className="mb-8">
          <ComponentPreview
            title="–ë–∞–∑–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
            description="–ü—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏"
            code={`const [isOpen, setIsOpen] = useState(false);

<Button variant="primary" onClick={() => setIsOpen(true)}>
  –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
</Button>

<Modal 
  isOpen={isOpen} 
  onClose={() => setIsOpen(false)}
  title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞"
  description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"
>
  <div className="flex gap-3 justify-center">
    <Button variant="outline" onClick={() => setIsOpen(false)}>
      –û—Ç–º–µ–Ω–∞
    </Button>
    <Button variant="primary" onClick={() => setIsOpen(false)}>
      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    </Button>
  </div>
</Modal>`}
          >
            <Button variant="primary" onClick={() => setIsOpen1(true)}>
              –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            </Button>

            <Modal
              isOpen={isOpen1}
              onClose={() => setIsOpen1(false)}
              title="–ë–∞–∑–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
              description="–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º"
            >
              <p className="text-gray-600 mb-4">
                –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
              </p>
              <div className="flex gap-3 justify-center">
                <Button variant="outline" onClick={() => setIsOpen1(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button variant="primary" onClick={() => setIsOpen1(false)}>
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                </Button>
              </div>
            </Modal>
          </ComponentPreview>
        </div>

        {/* –° –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π */}
        <div className="mb-8">
          <ComponentPreview
            title="–° –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–≤–µ—Ä—Ö—É"
            description="–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ –∏–∫–æ–Ω–∫–æ–π"
            code={`<Modal 
  isOpen={isOpen} 
  onClose={() => setIsOpen(false)}
  title="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
  description="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω."
  illustration={
    <div className="flex items-center justify-center h-32">
      <div className="text-7xl animate-bounce">üîê</div>
    </div>
  }
>
  <div className="flex gap-3 justify-center">
    <Button variant="outline" onClick={() => setIsOpen(false)}>
      –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    </Button>
    <Button variant="primary" onClick={() => setIsOpen(false)}>
      –î–∞–ª–µ–µ
    </Button>
  </div>
</Modal>`}
          >
            <Button variant="primary" onClick={() => setIsOpen2(true)}>
              –û—Ç–∫—Ä—ã—Ç—å —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π
            </Button>

            <Modal
              isOpen={isOpen2}
              onClose={() => setIsOpen2(false)}
              title="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
              description="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω."
              illustration={
                <div className="flex items-center justify-center h-32">
                  <div className="text-7xl animate-bounce">üîê</div>
                </div>
              }
            >
              <div className="flex gap-3 justify-center">
                <Button variant="outline" onClick={() => setIsOpen2(false)}>
                  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </Button>
                <Button variant="primary" onClick={() => setIsOpen2(false)}>
                  –î–∞–ª–µ–µ
                </Button>
              </div>
            </Modal>
          </ComponentPreview>
        </div>

        {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è */}
        <div className="mb-8">
          <ComponentPreview
            title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
            description="–û–ø–∞—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"
            code={`<Modal 
  isOpen={isOpen} 
  onClose={() => setIsOpen(false)}
  title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç?"
  description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å"
>
  <div className="flex gap-3 justify-center">
    <Button variant="outline" onClick={() => setIsOpen(false)}>
      –û—Ç–º–µ–Ω–∞
    </Button>
    <Button variant="primary" onClick={() => setIsOpen(false)}>
      –£–¥–∞–ª–∏—Ç—å
    </Button>
  </div>
</Modal>`}
          >
            <Button variant="primary" onClick={() => setIsOpen3(true)}>
              –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
            </Button>

            <Modal
              isOpen={isOpen3}
              onClose={() => setIsOpen3(false)}
              title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç?"
              description="–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã —É–≤–µ—Ä–µ–Ω—ã?"
            >
              <div className="flex gap-3 justify-center">
                <Button variant="outline" onClick={() => setIsOpen3(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button variant="primary" onClick={() => setIsOpen3(false)}>
                  –£–¥–∞–ª–∏—Ç—å
                </Button>
              </div>
            </Modal>
          </ComponentPreview>
        </div>

        {/* –° —Ñ–æ—Ä–º–æ–π */}
        <div className="mb-8">
          <ComponentPreview
            title="–° —Ñ–æ—Ä–º–æ–π –≤–Ω—É—Ç—Ä–∏"
            description="–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞"
            code={`const [taskName, setTaskName] = useState('');
const [taskDesc, setTaskDesc] = useState('');

<Modal 
  isOpen={isOpen} 
  onClose={() => setIsOpen(false)}
  title="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
  description="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"
>
  <div className="space-y-4 mb-4">
    <Input 
      label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
      value={taskName}
      onChange={(e) => setTaskName(e.target.value)}
    />
    <div className="w-full">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        –û–ø–∏—Å–∞–Ω–∏–µ
      </label>
      <textarea 
        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        value={taskDesc}
        onChange={(e) => setTaskDesc(e.target.value)}
        className="w-full px-4 py-2 border border-gray-300 rounded-lg h-24 resize-none focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
      />
    </div>
  </div>
  <div className="flex gap-3 justify-center">
    <Button variant="outline" onClick={() => setIsOpen(false)}>
      –û—Ç–º–µ–Ω–∞
    </Button>
    <Button variant="primary" onClick={() => setIsOpen(false)}>
      –°–æ–∑–¥–∞—Ç—å
    </Button>
  </div>
</Modal>`}
          >
            <Button variant="primary" onClick={() => setIsOpen4(true)}>
              –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            </Button>

            <Modal
              isOpen={isOpen4}
              onClose={() => setIsOpen4(false)}
              title="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"
              description="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"
            >
              <div className="space-y-4 mb-4">
                <Input
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                  value={taskName}
                  onChange={(e) => setTaskName(e.target.value)}
                />
                <div className="w-full">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </label>
                  <textarea
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    value={taskDesc}
                    onChange={(e) => setTaskDesc(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg h-24 resize-none focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                  />
                </div>
              </div>
              <div className="flex gap-3 justify-center">
                <Button variant="outline" onClick={() => setIsOpen4(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button variant="primary" onClick={() => setIsOpen4(false)}>
                  –°–æ–∑–¥–∞—Ç—å
                </Button>
              </div>
            </Modal>
          </ComponentPreview>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <div className="mt-16 p-8 bg-white rounded-2xl shadow-lg border-2 border-blue-100">
          <h2 className="text-3xl font-bold text-gray-900 mb-6">
            –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ?
          </h2>

          <div className="space-y-6">
            <div className="flex gap-4">
              <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                1
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-2">
                  –°–æ–∑–¥–∞–π —Ñ–∞–π–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                </h3>
                <p className="text-gray-600">
                  –°–æ–∑–¥–∞–π{" "}
                  <code className="bg-gray-100 px-2 py-1 rounded text-sm">
                    components/ui/Modal.tsx
                  </code>
                </p>
              </div>
            </div>

            <div className="flex gap-4">
              <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                2
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-2">–°–∫–æ–ø–∏—Ä—É–π –∫–æ–¥</h3>
                <p className="text-gray-600">
                  –°–∫–æ–ø–∏—Ä—É–π –≤–µ—Å—å –∫–æ–¥ –∏–∑ –±–ª–æ–∫–∞ –Ω–∏–∂–µ –∏ –≤—Å—Ç–∞–≤—å –≤ —Å–≤–æ–π —Ñ–∞–π–ª
                </p>
              </div>
            </div>

            <div className="flex gap-4">
              <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                3
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-2">
                  –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π
                </h3>
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg text-sm overflow-x-auto mt-2">
                  {`import Modal from '@/components/ui/Modal';
import Button from '@/components/ui/Button';

export default function MyPage() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <Button variant="primary" onClick={() => setIsOpen(true)}>
        –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
      </Button>

      <Modal 
        isOpen={isOpen} 
        onClose={() => setIsOpen(false)}
        title="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        description="–û–ø–∏—Å–∞–Ω–∏–µ"
      >
        <div className="flex gap-3 justify-center">
          <Button variant="outline" onClick={() => setIsOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button variant="primary" onClick={() => setIsOpen(false)}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          </Button>
        </div>
      </Modal>
    </>
  );
}`}
                </pre>
              </div>
            </div>

            <div className="flex gap-4">
              <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold">
                4
              </div>
              <div className="w-full">
                <h3 className="font-semibold text-lg mb-2">
                  –ù–∞—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π –¥–∏–∑–∞–π–Ω!
                </h3>
                <p className="text-gray-600 mb-3">
                  –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–ª–∏ —Ü–≤–µ—Ç–∞? –ù–∞–π–¥–∏ –≤ –∫–æ–¥–µ:
                </p>
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg text-sm overflow-x-auto">
                  {`// –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞:
max-w-md        ‚Üí    max-w-2xl  (–¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–∫–Ω–∞)

// –¶–≤–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏:
from-blue-600 to-blue-700  ‚Üí  from-purple-600 to-purple-700

// –§–æ–Ω –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è:
bg-black/50     ‚Üí    bg-black/70  (—Ç–µ–º–Ω–µ–µ)

// –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤:
rounded-2xl     ‚Üí    rounded-3xl  (–±–æ–ª—å—à–µ)`}
                </pre>
              </div>
            </div>
          </div>
        </div>

        {/* –ü–æ–ª–Ω—ã–π –∫–æ–¥ Modal */}
        <div className="mt-12">
          <ComponentPreview
            title="–ü–æ–ª–Ω—ã–π –∫–æ–¥ Modal"
            description="–°–∫–æ–ø–∏—Ä—É–π –≤ components/ui/Modal.tsx"
            code={modalCode}
          >
            <div className="text-center text-gray-500 py-8">
              ‚¨áÔ∏è –ü—Ä–æ–∫—Ä—É—Ç–∏ –≤–Ω–∏–∑ ‚¨áÔ∏è
            </div>
          </ComponentPreview>
        </div>
      </div>
    </div>
  );
}
